{
    "cheat_sheet": {
        "af2ed7fb-e74b-49d4-9f03-b33696362169": {
            "token": "af2ed7fb-e74b-49d4-9f03-b33696362169",
            "title": "tu",
            "author_token": "22b68963-535e-4ec1-8891-c3e6b1ea2547",
            "content": "el",
            "context": "is\r\n",
            "date": "21/03/2024 - 11:32",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": ["fz"],
            "comments": []
        },
        "91345a22-f73b-4b50-9d6c-ed2070a55479": {
            "token": "91345a22-f73b-4b50-9d6c-ed2070a55479",
            "title": "Addition",
            "author_token": "a85aa4aa-4c5d-485a-9c82-9e9f5b875cc3",
            "content": "1 + 1 = 2",
            "context": "very useful",
            "date": "21/03/2024 - 11:38",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "16efb43f-900e-45cc-a039-1e5055f9d35e": {
            "token": "16efb43f-900e-45cc-a039-1e5055f9d35e",
            "title": "New thing",
            "author_token": "147c08ef-7d47-490c-ad48-aba10a0911db",
            "content": "heh",
            "context": "slkjqsd",
            "date": "21/03/2024 - 12:05",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": [
                {
                    "token": "147c08ef-7d47-490c-ad48-aba10a0911db",
                    "content": "very usefullllllll"
                }
            ]
        },
        "ce222c49-b96c-459f-90f4-45b94c16cf6e": {
            "token": "ce222c49-b96c-459f-90f4-45b94c16cf6e",
            "title": "a",
            "author_token": "ea55e83a-29ee-45f8-bf71-0225ff737502",
            "content": "b",
            "context": "c",
            "date": "22/03/2024 - 09:06",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "490efbda-4a27-44a5-8c2f-6948de141dd6": {
            "token": "490efbda-4a27-44a5-8c2f-6948de141dd6",
            "title": "vb",
            "author_token": "ea55e83a-29ee-45f8-bf71-0225ff737502",
            "content": "a",
            "context": "sqd",
            "date": "22/03/2024 - 09:09",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "6f6b909d-2fbc-4b53-9aba-8132ad92baa6": {
            "token": "6f6b909d-2fbc-4b53-9aba-8132ad92baa6",
            "title": "sqsd",
            "author_token": "ea55e83a-29ee-45f8-bf71-0225ff737502",
            "content": "qaaa",
            "context": "asxd",
            "date": "22/03/2024 - 09:16",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": [
                {
                    "token": "2641bd812613b65c906609a0a865a9d6ed085f21a7dfca7e8cef4447c84fe428",
                    "content": "hello world"
                }
            ]
        },
        "b6275cbd-3e99-4a4c-9422-73d7219de183": {
            "token": "b6275cbd-3e99-4a4c-9422-73d7219de183",
            "title": "Quadratic",
            "author_token": "35b3bc9c-aa91-4c5f-a4af-08e555c71428",
            "content": "$ax^2+bx+c$ is the form of all quadratic polynomials\\\r\n$\\Delta=\\dfrac{-b}{2a}$ is the expression of the discriminant",
            "context": "ax\u00b2+bx+c type of stuff",
            "date": "22/03/2024 - 11:18",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "2f3f9da8-aad4-4b72-ad4f-be7e5237b425": {
            "token": "2f3f9da8-aad4-4b72-ad4f-be7e5237b425",
            "title": "hello",
            "author_token": "d1ffa8f2-3737-4955-b26e-2e245de68f9b",
            "content": "world",
            "context": "hello world",
            "date": "22/03/2024 - 11:45",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "d46a20f6-5cfc-4686-98cc-c94026705c7b": {
            "token": "d46a20f6-5cfc-4686-98cc-c94026705c7b",
            "title": "a",
            "author_token": "7e774c3c-4019-436e-ba1d-e96ac8dd1566",
            "content": "b",
            "context": "c",
            "date": "22/03/2024 - 11:45",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "1e16af73-d1cb-477a-bb99-8c8f9686f367": {
            "token": "1e16af73-d1cb-477a-bb99-8c8f9686f367",
            "title": "this",
            "author_token": "3a2ff6ed-bdbc-4afc-b8b8-61fe40a46a74",
            "content": "is",
            "context": "a cheatsheet",
            "date": "22/03/2024 - 11:49",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": [
                {
                    "token": "879294d245051906e0e8455470ee786bc4b09da005abecad048769cd31814aa3",
                    "content": "hello world\r\nhj"
                }
            ]
        },
        "a06e6360-0fba-41b2-a1fb-7ddb3736bd5f": {
            "token": "a06e6360-0fba-41b2-a1fb-7ddb3736bd5f",
            "title": "t",
            "author_token": "f5ed0df0-f98d-4230-820b-20d7dcfff078",
            "content": "u",
            "context": "ks",
            "date": "22/03/2024 - 12:10",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "e1c94aad-d558-4927-afd0-e09ccddec32e": {
            "token": "e1c94aad-d558-4927-afd0-e09ccddec32e",
            "title": "p",
            "author_token": "f5ed0df0-f98d-4230-820b-20d7dcfff078",
            "content": "l",
            "context": "m",
            "date": "22/03/2024 - 12:15",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": []
        },
        "18438e03-954a-4e77-9d68-916523105f8c": {
            "token": "18438e03-954a-4e77-9d68-916523105f8c",
            "title": "a",
            "author_token": "f5ed0df0-f98d-4230-820b-20d7dcfff078",
            "content": "o",
            "context": "p",
            "date": "22/03/2024 - 12:16",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": [
                {
                    "token": "42cf123d94525c2ee4d4c614912cb671ad022ae9a93a48708e6b14a51143cb05",
                    "content": "it finally works???"
                }
            ]
        },
        "aea31da0-1f84-4163-b0b3-79c0827cf712": {
            "token": "aea31da0-1f84-4163-b0b3-79c0827cf712",
            "title": "Multiplication",
            "author_token": "3a2ff6ed-bdbc-4afc-b8b8-61fe40a46a74",
            "content": "There are many ways to write it:\r\n$4\\cdot 4$\\\r\n$4 * 4$\\\r\netc",
            "context": ".",
            "date": "26/03/2024 - 08:41",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [],
            "comments": [
                {
                    "token": "42cf123d94525c2ee4d4c614912cb671ad022ae9a93a48708e6b14a51143cb05",
                    "content": "this works just fine!"
                }
            ]
        },
        "b55f83fa-09c2-43ae-8c1d-1f26268e608f": {
            "token": "b55f83fa-09c2-43ae-8c1d-1f26268e608f",
            "title": "tset",
            "author_token": "b4263b44-0be2-43a2-93f5-71c934eaa471",
            "content": "# Documentation\n---\n\n## Organisation des fichiers\n\nLes conversions sont effectu\u00c3\u00a9es par 3 fichiers : \n- [ConvertToBin.py](../ConvertToBin.py)\n- [ConvertToDec.py](../ConvertToDec.py)\n- [ConvertToHex.py](../ConvertToHex.py)\n\nL'IHM est assur\u00c3\u00a9e par le fichier :\n- [ParseInput.py](../ParseInput.py)\n\nUtilisant les fichiers :\n\n- [AsciiArt.py](../AsciiArt.py)\n- [AsciiArtFont.txt](../AsciiArtFont.txt)\n\nAfin de g\u00c3\u00a9n\u00c3\u00a9rer le titre.\n\nLa mise en relation des diff\u00c3\u00a9rentes parties du programme est effectu\u00c3\u00a9e par le fichier :\n\n- [main.py](../main.py)\n\n## Les principales fonctions\n\n### Dans ConvertToDec.py\n\n- `convert_to_dec (n, base)` est une fonction qui transforme n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre d\u00c3\u00a9cimal.\nCette fonction utilise les fonctions :\n\n- `convert_hex_to_dec (h)` convertissant un hexadecimal `h` en d\u00c3\u00a9cimal\n\n- `convert_bin_to_dec (b)` convertissant un binaire `b` en d\u00c3\u00a9cimal\n\n### Dans ConvertToHex.py\n\n- `convert_to_hex (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre hexad\u00c3\u00a9cimal.\nelle utilise les fonctions :\n\n- `convert_dec_to_hex (n)` convertissant un d\u00c3\u00a9cimal `n` en hexad\u00c3\u00a9cimal\n\n- `convert_bin_to_hex (b)` convertissant un binaire `b` en un hexad\u00c3\u00a9cimal, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en hexad\u00c3\u00a9cimal via `convert_dec_to_hex`.\n\n### Dans ConvertToBin.py\n\n- `convert_to_bin (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e a une base disponible appel\u00c3\u00a9e `base` en un nombre binaire.\nelle utilise les fonctions :\n\n- `convert_dec_to_bin (n)` convertissant un d\u00c3\u00a9cimal `n` en binaire\n\n- `convert_hex_to_bin (h)` convertissant un hexad\u00c3\u00a9cimal `h` en un binaire, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en binaire via `convert_dec_to_bin`.\n\n### Dans ParseInput.py\n\n- `output_result (n, initial_base, final_base)` est une fonction affichant le r\u00c3\u00a9sultat de la conversion de l'entier naturel `n` en base `initial_base` \u00c3\u00a0 la base `final_base`. Cette fonction prend en arguments trois strings et ne retourne rien.\n\n- `get_inputs ()` est une fonction permettant de recueillir les entr\u00c3\u00a9es de l'utilisateur (\u00c3\u00a9tant le nombre entier \u00c3\u00a0 convertir, sa base, ainsi que la base dans laquelle on veut convertir l'entier naturel). Par cons\u00c3\u00a9quence, cette fonction ne prend aucun argument, mais renvoie trois strings.\n\n- `wait_for_input (text, error_text, *possible_inputs)` est une fonction permettant d'obtenir une entr\u00c3\u00a9e de l'utilisateur apr\u00c3\u00a8s avoir afficher le string `texte`. Si l'entr\u00c3\u00a9e donn\u00c3\u00a9e n'est pas dans les diff\u00c3\u00a9rents `*possible_inputs`, alors on affiche `error_text` et on redemande \u00c3\u00a0 l'utilisateur d'entrer une information jusqu'\u00c3\u00a0 ce qu'elle soit valid\u00c3\u00a9e.\n\n### Dans AsciiArt.py\n\n- `print_with_font (text)` est une fonction qui premi\u00c3\u00a8rement importe l'\u00c3\u00a9quivalent de chaque lettre \u00c3\u00a0 l'aide de la fonction `get_font`. Elle utilise ces \u00c3\u00a9quivalences pour \u00c3\u00a9crire un texte donn\u00c3\u00a9 en argument avec la police choisie.\n\n- `get_font ()` est une fonction qui retourne un dictionnaire comprenant pour chaque lettre une liste correspondant \u00c3\u00a0 chaque ligne de la police.\n\n### Dans main.py\n\n- `introduce_program ()` \u00c3\u00a9crit les informations d'utilisation du programme ainsi que le titre \u00c3\u00a0 l'aide de la fonction `print_with_font ()` import\u00c3\u00a9e depuis [AsciiArt.py](../AsciiArt.py) .\n\n- `get_str_list_conversions (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et renvoie une liste de textes telle que chaque texte r\u00c3\u00a9sume une conversion, dans l'ordre dans lequel les conversions ont \u00c3\u00a9t\u00c3\u00a9 r\u00c3\u00a9alis\u00c3\u00a9es.\n\n- `display_conversions ()` \u00c3\u00a9crit en sortie toutes les conversions qui ont \u00c3\u00a9t\u00c3\u00a9 faites depuis le lancement du programme, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- `update_txt_file (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et \u00c3\u00a9crit \u00c3\u00a0 la suite du fichier `conversions.txt` les conversions, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- La derni\u00c3\u00a8re partie n'est ex\u00c3\u00a9cut\u00c3\u00a9e que si le programme est execut\u00c3\u00a9 directement. Elle appelle la fonction `introduce_program ()`, r\u00c3\u00a9alisant les conversions de l'utilisateur et les affichant apr\u00c3\u00a8s que l'utilisateur n'ait plus envie de r\u00c3\u00a9aliser des conversions. \n\n## Utilisation\n\nChaque fichier peut \u00c3\u00aatre utilis\u00c3\u00a9 ind\u00c3\u00a9pendemment des autres, mis \u00c3\u00a0 part [ConvertToBin.py](../ConvertToBin.py)et [ConvertToHex.py](../ConvertToHex.py) qui emploient [ConvertToDec.py](../ConvertToDec.py), en l'important a l'aide du keyword `import`.\n",
            "context": "tset",
            "date": "27/03/2024 - 10:34",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [
                "tstt"
            ],
            "comments": []
        },
        "95665c7f-6b8d-4cb9-a957-1743b23025f9": {
            "token": "95665c7f-6b8d-4cb9-a957-1743b23025f9",
            "title": "test",
            "author_token": "b4263b44-0be2-43a2-93f5-71c934eaa471",
            "content": "# Documentation\n---\n\n## Organisation des fichiers\n\nLes conversions sont effectu\u00c3\u00a9es par 3 fichiers : \n- [ConvertToBin.py](../ConvertToBin.py)\n- [ConvertToDec.py](../ConvertToDec.py)\n- [ConvertToHex.py](../ConvertToHex.py)\n\nL'IHM est assur\u00c3\u00a9e par le fichier :\n- [ParseInput.py](../ParseInput.py)\n\nUtilisant les fichiers :\n\n- [AsciiArt.py](../AsciiArt.py)\n- [AsciiArtFont.txt](../AsciiArtFont.txt)\n\nAfin de g\u00c3\u00a9n\u00c3\u00a9rer le titre.\n\nLa mise en relation des diff\u00c3\u00a9rentes parties du programme est effectu\u00c3\u00a9e par le fichier :\n\n- [main.py](../main.py)\n\n## Les principales fonctions\n\n### Dans ConvertToDec.py\n\n- `convert_to_dec (n, base)` est une fonction qui transforme n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre d\u00c3\u00a9cimal.\nCette fonction utilise les fonctions :\n\n- `convert_hex_to_dec (h)` convertissant un hexadecimal `h` en d\u00c3\u00a9cimal\n\n- `convert_bin_to_dec (b)` convertissant un binaire `b` en d\u00c3\u00a9cimal\n\n### Dans ConvertToHex.py\n\n- `convert_to_hex (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre hexad\u00c3\u00a9cimal.\nelle utilise les fonctions :\n\n- `convert_dec_to_hex (n)` convertissant un d\u00c3\u00a9cimal `n` en hexad\u00c3\u00a9cimal\n\n- `convert_bin_to_hex (b)` convertissant un binaire `b` en un hexad\u00c3\u00a9cimal, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en hexad\u00c3\u00a9cimal via `convert_dec_to_hex`.\n\n### Dans ConvertToBin.py\n\n- `convert_to_bin (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e a une base disponible appel\u00c3\u00a9e `base` en un nombre binaire.\nelle utilise les fonctions :\n\n- `convert_dec_to_bin (n)` convertissant un d\u00c3\u00a9cimal `n` en binaire\n\n- `convert_hex_to_bin (h)` convertissant un hexad\u00c3\u00a9cimal `h` en un binaire, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en binaire via `convert_dec_to_bin`.\n\n### Dans ParseInput.py\n\n- `output_result (n, initial_base, final_base)` est une fonction affichant le r\u00c3\u00a9sultat de la conversion de l'entier naturel `n` en base `initial_base` \u00c3\u00a0 la base `final_base`. Cette fonction prend en arguments trois strings et ne retourne rien.\n\n- `get_inputs ()` est une fonction permettant de recueillir les entr\u00c3\u00a9es de l'utilisateur (\u00c3\u00a9tant le nombre entier \u00c3\u00a0 convertir, sa base, ainsi que la base dans laquelle on veut convertir l'entier naturel). Par cons\u00c3\u00a9quence, cette fonction ne prend aucun argument, mais renvoie trois strings.\n\n- `wait_for_input (text, error_text, *possible_inputs)` est une fonction permettant d'obtenir une entr\u00c3\u00a9e de l'utilisateur apr\u00c3\u00a8s avoir afficher le string `texte`. Si l'entr\u00c3\u00a9e donn\u00c3\u00a9e n'est pas dans les diff\u00c3\u00a9rents `*possible_inputs`, alors on affiche `error_text` et on redemande \u00c3\u00a0 l'utilisateur d'entrer une information jusqu'\u00c3\u00a0 ce qu'elle soit valid\u00c3\u00a9e.\n\n### Dans AsciiArt.py\n\n- `print_with_font (text)` est une fonction qui premi\u00c3\u00a8rement importe l'\u00c3\u00a9quivalent de chaque lettre \u00c3\u00a0 l'aide de la fonction `get_font`. Elle utilise ces \u00c3\u00a9quivalences pour \u00c3\u00a9crire un texte donn\u00c3\u00a9 en argument avec la police choisie.\n\n- `get_font ()` est une fonction qui retourne un dictionnaire comprenant pour chaque lettre une liste correspondant \u00c3\u00a0 chaque ligne de la police.\n\n### Dans main.py\n\n- `introduce_program ()` \u00c3\u00a9crit les informations d'utilisation du programme ainsi que le titre \u00c3\u00a0 l'aide de la fonction `print_with_font ()` import\u00c3\u00a9e depuis [AsciiArt.py](../AsciiArt.py) .\n\n- `get_str_list_conversions (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et renvoie une liste de textes telle que chaque texte r\u00c3\u00a9sume une conversion, dans l'ordre dans lequel les conversions ont \u00c3\u00a9t\u00c3\u00a9 r\u00c3\u00a9alis\u00c3\u00a9es.\n\n- `display_conversions ()` \u00c3\u00a9crit en sortie toutes les conversions qui ont \u00c3\u00a9t\u00c3\u00a9 faites depuis le lancement du programme, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- `update_txt_file (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et \u00c3\u00a9crit \u00c3\u00a0 la suite du fichier `conversions.txt` les conversions, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- La derni\u00c3\u00a8re partie n'est ex\u00c3\u00a9cut\u00c3\u00a9e que si le programme est execut\u00c3\u00a9 directement. Elle appelle la fonction `introduce_program ()`, r\u00c3\u00a9alisant les conversions de l'utilisateur et les affichant apr\u00c3\u00a8s que l'utilisateur n'ait plus envie de r\u00c3\u00a9aliser des conversions. \n\n## Utilisation\n\nChaque fichier peut \u00c3\u00aatre utilis\u00c3\u00a9 ind\u00c3\u00a9pendemment des autres, mis \u00c3\u00a0 part [ConvertToBin.py](../ConvertToBin.py)et [ConvertToHex.py](../ConvertToHex.py) qui emploient [ConvertToDec.py](../ConvertToDec.py), en l'important a l'aide du keyword `import`.\n",
            "context": "test",
            "date": "27/03/2024 - 10:41",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [
                "test"
            ],
            "comments": []
        },
        "9fc860f2-5f47-4598-b355-42e435095b78": {
            "token": "9fc860f2-5f47-4598-b355-42e435095b78",
            "title": "tayufeyi",
            "author_token": "b4263b44-0be2-43a2-93f5-71c934eaa471",
            "content": "# Documentation\n---\n\n## Organisation des fichiers\n\nLes conversions sont effectu\u00c3\u00a9es par 3 fichiers : \n- [ConvertToBin.py](../ConvertToBin.py)\n- [ConvertToDec.py](../ConvertToDec.py)\n- [ConvertToHex.py](../ConvertToHex.py)\n\nL'IHM est assur\u00c3\u00a9e par le fichier :\n- [ParseInput.py](../ParseInput.py)\n\nUtilisant les fichiers :\n\n- [AsciiArt.py](../AsciiArt.py)\n- [AsciiArtFont.txt](../AsciiArtFont.txt)\n\nAfin de g\u00c3\u00a9n\u00c3\u00a9rer le titre.\n\nLa mise en relation des diff\u00c3\u00a9rentes parties du programme est effectu\u00c3\u00a9e par le fichier :\n\n- [main.py](../main.py)\n\n## Les principales fonctions\n\n### Dans ConvertToDec.py\n\n- `convert_to_dec (n, base)` est une fonction qui transforme n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre d\u00c3\u00a9cimal.\nCette fonction utilise les fonctions :\n\n- `convert_hex_to_dec (h)` convertissant un hexadecimal `h` en d\u00c3\u00a9cimal\n\n- `convert_bin_to_dec (b)` convertissant un binaire `b` en d\u00c3\u00a9cimal\n\n### Dans ConvertToHex.py\n\n- `convert_to_hex (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre hexad\u00c3\u00a9cimal.\nelle utilise les fonctions :\n\n- `convert_dec_to_hex (n)` convertissant un d\u00c3\u00a9cimal `n` en hexad\u00c3\u00a9cimal\n\n- `convert_bin_to_hex (b)` convertissant un binaire `b` en un hexad\u00c3\u00a9cimal, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en hexad\u00c3\u00a9cimal via `convert_dec_to_hex`.\n\n### Dans ConvertToBin.py\n\n- `convert_to_bin (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e a une base disponible appel\u00c3\u00a9e `base` en un nombre binaire.\nelle utilise les fonctions :\n\n- `convert_dec_to_bin (n)` convertissant un d\u00c3\u00a9cimal `n` en binaire\n\n- `convert_hex_to_bin (h)` convertissant un hexad\u00c3\u00a9cimal `h` en un binaire, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en binaire via `convert_dec_to_bin`.\n\n### Dans ParseInput.py\n\n- `output_result (n, initial_base, final_base)` est une fonction affichant le r\u00c3\u00a9sultat de la conversion de l'entier naturel `n` en base `initial_base` \u00c3\u00a0 la base `final_base`. Cette fonction prend en arguments trois strings et ne retourne rien.\n\n- `get_inputs ()` est une fonction permettant de recueillir les entr\u00c3\u00a9es de l'utilisateur (\u00c3\u00a9tant le nombre entier \u00c3\u00a0 convertir, sa base, ainsi que la base dans laquelle on veut convertir l'entier naturel). Par cons\u00c3\u00a9quence, cette fonction ne prend aucun argument, mais renvoie trois strings.\n\n- `wait_for_input (text, error_text, *possible_inputs)` est une fonction permettant d'obtenir une entr\u00c3\u00a9e de l'utilisateur apr\u00c3\u00a8s avoir afficher le string `texte`. Si l'entr\u00c3\u00a9e donn\u00c3\u00a9e n'est pas dans les diff\u00c3\u00a9rents `*possible_inputs`, alors on affiche `error_text` et on redemande \u00c3\u00a0 l'utilisateur d'entrer une information jusqu'\u00c3\u00a0 ce qu'elle soit valid\u00c3\u00a9e.\n\n### Dans AsciiArt.py\n\n- `print_with_font (text)` est une fonction qui premi\u00c3\u00a8rement importe l'\u00c3\u00a9quivalent de chaque lettre \u00c3\u00a0 l'aide de la fonction `get_font`. Elle utilise ces \u00c3\u00a9quivalences pour \u00c3\u00a9crire un texte donn\u00c3\u00a9 en argument avec la police choisie.\n\n- `get_font ()` est une fonction qui retourne un dictionnaire comprenant pour chaque lettre une liste correspondant \u00c3\u00a0 chaque ligne de la police.\n\n### Dans main.py\n\n- `introduce_program ()` \u00c3\u00a9crit les informations d'utilisation du programme ainsi que le titre \u00c3\u00a0 l'aide de la fonction `print_with_font ()` import\u00c3\u00a9e depuis [AsciiArt.py](../AsciiArt.py) .\n\n- `get_str_list_conversions (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et renvoie une liste de textes telle que chaque texte r\u00c3\u00a9sume une conversion, dans l'ordre dans lequel les conversions ont \u00c3\u00a9t\u00c3\u00a9 r\u00c3\u00a9alis\u00c3\u00a9es.\n\n- `display_conversions ()` \u00c3\u00a9crit en sortie toutes les conversions qui ont \u00c3\u00a9t\u00c3\u00a9 faites depuis le lancement du programme, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- `update_txt_file (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et \u00c3\u00a9crit \u00c3\u00a0 la suite du fichier `conversions.txt` les conversions, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- La derni\u00c3\u00a8re partie n'est ex\u00c3\u00a9cut\u00c3\u00a9e que si le programme est execut\u00c3\u00a9 directement. Elle appelle la fonction `introduce_program ()`, r\u00c3\u00a9alisant les conversions de l'utilisateur et les affichant apr\u00c3\u00a8s que l'utilisateur n'ait plus envie de r\u00c3\u00a9aliser des conversions. \n\n## Utilisation\n\nChaque fichier peut \u00c3\u00aatre utilis\u00c3\u00a9 ind\u00c3\u00a9pendemment des autres, mis \u00c3\u00a0 part [ConvertToBin.py](../ConvertToBin.py)et [ConvertToHex.py](../ConvertToHex.py) qui emploient [ConvertToDec.py](../ConvertToDec.py), en l'important a l'aide du keyword `import`.\n",
            "context": "giqdygfouq",
            "date": "27/03/2024 - 10:45",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [
                "gugoqugfo"
            ],
            "comments": []
        },
        "41a03d98-adf4-46f5-999d-a709e6d16a5f": {
            "token": "41a03d98-adf4-46f5-999d-a709e6d16a5f",
            "title": "test",
            "author_token": "b4263b44-0be2-43a2-93f5-71c934eaa471",
            "content": "# Documentation\n---\n\n## Organisation des fichiers\n\nLes conversions sont effectu\u00c3\u00a9es par 3 fichiers : \n- [ConvertToBin.py](../ConvertToBin.py)\n- [ConvertToDec.py](../ConvertToDec.py)\n- [ConvertToHex.py](../ConvertToHex.py)\n\nL'IHM est assur\u00c3\u00a9e par le fichier :\n- [ParseInput.py](../ParseInput.py)\n\nUtilisant les fichiers :\n\n- [AsciiArt.py](../AsciiArt.py)\n- [AsciiArtFont.txt](../AsciiArtFont.txt)\n\nAfin de g\u00c3\u00a9n\u00c3\u00a9rer le titre.\n\nLa mise en relation des diff\u00c3\u00a9rentes parties du programme est effectu\u00c3\u00a9e par le fichier :\n\n- [main.py](../main.py)\n\n## Les principales fonctions\n\n### Dans ConvertToDec.py\n\n- `convert_to_dec (n, base)` est une fonction qui transforme n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre d\u00c3\u00a9cimal.\nCette fonction utilise les fonctions :\n\n- `convert_hex_to_dec (h)` convertissant un hexadecimal `h` en d\u00c3\u00a9cimal\n\n- `convert_bin_to_dec (b)` convertissant un binaire `b` en d\u00c3\u00a9cimal\n\n### Dans ConvertToHex.py\n\n- `convert_to_hex (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre hexad\u00c3\u00a9cimal.\nelle utilise les fonctions :\n\n- `convert_dec_to_hex (n)` convertissant un d\u00c3\u00a9cimal `n` en hexad\u00c3\u00a9cimal\n\n- `convert_bin_to_hex (b)` convertissant un binaire `b` en un hexad\u00c3\u00a9cimal, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en hexad\u00c3\u00a9cimal via `convert_dec_to_hex`.\n\n### Dans ConvertToBin.py\n\n- `convert_to_bin (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e a une base disponible appel\u00c3\u00a9e `base` en un nombre binaire.\nelle utilise les fonctions :\n\n- `convert_dec_to_bin (n)` convertissant un d\u00c3\u00a9cimal `n` en binaire\n\n- `convert_hex_to_bin (h)` convertissant un hexad\u00c3\u00a9cimal `h` en un binaire, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en binaire via `convert_dec_to_bin`.\n\n### Dans ParseInput.py\n\n- `output_result (n, initial_base, final_base)` est une fonction affichant le r\u00c3\u00a9sultat de la conversion de l'entier naturel `n` en base `initial_base` \u00c3\u00a0 la base `final_base`. Cette fonction prend en arguments trois strings et ne retourne rien.\n\n- `get_inputs ()` est une fonction permettant de recueillir les entr\u00c3\u00a9es de l'utilisateur (\u00c3\u00a9tant le nombre entier \u00c3\u00a0 convertir, sa base, ainsi que la base dans laquelle on veut convertir l'entier naturel). Par cons\u00c3\u00a9quence, cette fonction ne prend aucun argument, mais renvoie trois strings.\n\n- `wait_for_input (text, error_text, *possible_inputs)` est une fonction permettant d'obtenir une entr\u00c3\u00a9e de l'utilisateur apr\u00c3\u00a8s avoir afficher le string `texte`. Si l'entr\u00c3\u00a9e donn\u00c3\u00a9e n'est pas dans les diff\u00c3\u00a9rents `*possible_inputs`, alors on affiche `error_text` et on redemande \u00c3\u00a0 l'utilisateur d'entrer une information jusqu'\u00c3\u00a0 ce qu'elle soit valid\u00c3\u00a9e.\n\n### Dans AsciiArt.py\n\n- `print_with_font (text)` est une fonction qui premi\u00c3\u00a8rement importe l'\u00c3\u00a9quivalent de chaque lettre \u00c3\u00a0 l'aide de la fonction `get_font`. Elle utilise ces \u00c3\u00a9quivalences pour \u00c3\u00a9crire un texte donn\u00c3\u00a9 en argument avec la police choisie.\n\n- `get_font ()` est une fonction qui retourne un dictionnaire comprenant pour chaque lettre une liste correspondant \u00c3\u00a0 chaque ligne de la police.\n\n### Dans main.py\n\n- `introduce_program ()` \u00c3\u00a9crit les informations d'utilisation du programme ainsi que le titre \u00c3\u00a0 l'aide de la fonction `print_with_font ()` import\u00c3\u00a9e depuis [AsciiArt.py](../AsciiArt.py) .\n\n- `get_str_list_conversions (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et renvoie une liste de textes telle que chaque texte r\u00c3\u00a9sume une conversion, dans l'ordre dans lequel les conversions ont \u00c3\u00a9t\u00c3\u00a9 r\u00c3\u00a9alis\u00c3\u00a9es.\n\n- `display_conversions ()` \u00c3\u00a9crit en sortie toutes les conversions qui ont \u00c3\u00a9t\u00c3\u00a9 faites depuis le lancement du programme, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- `update_txt_file (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et \u00c3\u00a9crit \u00c3\u00a0 la suite du fichier `conversions.txt` les conversions, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- La derni\u00c3\u00a8re partie n'est ex\u00c3\u00a9cut\u00c3\u00a9e que si le programme est execut\u00c3\u00a9 directement. Elle appelle la fonction `introduce_program ()`, r\u00c3\u00a9alisant les conversions de l'utilisateur et les affichant apr\u00c3\u00a8s que l'utilisateur n'ait plus envie de r\u00c3\u00a9aliser des conversions. \n\n## Utilisation\n\nChaque fichier peut \u00c3\u00aatre utilis\u00c3\u00a9 ind\u00c3\u00a9pendemment des autres, mis \u00c3\u00a0 part [ConvertToBin.py](../ConvertToBin.py)et [ConvertToHex.py](../ConvertToHex.py) qui emploient [ConvertToDec.py](../ConvertToDec.py), en l'important a l'aide du keyword `import`.\n",
            "context": "test",
            "date": "27/03/2024 - 10:59",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [
                "test"
            ],
            "comments": []
        },
        "d015ac77-d91e-4297-b828-ec0fa838db55": {
            "token": "d015ac77-d91e-4297-b828-ec0fa838db55",
            "title": "giyqgfiqyfgeivi",
            "author_token": "b4263b44-0be2-43a2-93f5-71c934eaa471",
            "content": "# Documentation\n---\n\n## Organisation des fichiers\n\nLes conversions sont effectu\u00c3\u00a9es par 3 fichiers : \n- [ConvertToBin.py](../ConvertToBin.py)\n- [ConvertToDec.py](../ConvertToDec.py)\n- [ConvertToHex.py](../ConvertToHex.py)\n\nL'IHM est assur\u00c3\u00a9e par le fichier :\n- [ParseInput.py](../ParseInput.py)\n\nUtilisant les fichiers :\n\n- [AsciiArt.py](../AsciiArt.py)\n- [AsciiArtFont.txt](../AsciiArtFont.txt)\n\nAfin de g\u00c3\u00a9n\u00c3\u00a9rer le titre.\n\nLa mise en relation des diff\u00c3\u00a9rentes parties du programme est effectu\u00c3\u00a9e par le fichier :\n\n- [main.py](../main.py)\n\n## Les principales fonctions\n\n### Dans ConvertToDec.py\n\n- `convert_to_dec (n, base)` est une fonction qui transforme n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre d\u00c3\u00a9cimal.\nCette fonction utilise les fonctions :\n\n- `convert_hex_to_dec (h)` convertissant un hexadecimal `h` en d\u00c3\u00a9cimal\n\n- `convert_bin_to_dec (b)` convertissant un binaire `b` en d\u00c3\u00a9cimal\n\n### Dans ConvertToHex.py\n\n- `convert_to_hex (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e \u00c3\u00a0 une base disponible appel\u00c3\u00a9e `base` en un nombre hexad\u00c3\u00a9cimal.\nelle utilise les fonctions :\n\n- `convert_dec_to_hex (n)` convertissant un d\u00c3\u00a9cimal `n` en hexad\u00c3\u00a9cimal\n\n- `convert_bin_to_hex (b)` convertissant un binaire `b` en un hexad\u00c3\u00a9cimal, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en hexad\u00c3\u00a9cimal via `convert_dec_to_hex`.\n\n### Dans ConvertToBin.py\n\n- `convert_to_bin (n, base)` transformant n'importe quelle cha\u00c3\u00aene de caract\u00c3\u00a8res `n` associ\u00c3\u00a9e a une base disponible appel\u00c3\u00a9e `base` en un nombre binaire.\nelle utilise les fonctions :\n\n- `convert_dec_to_bin (n)` convertissant un d\u00c3\u00a9cimal `n` en binaire\n\n- `convert_hex_to_bin (h)` convertissant un hexad\u00c3\u00a9cimal `h` en un binaire, en le convertissant d'abord en d\u00c3\u00a9cimal via `convert_to_dec` puis en binaire via `convert_dec_to_bin`.\n\n### Dans ParseInput.py\n\n- `output_result (n, initial_base, final_base)` est une fonction affichant le r\u00c3\u00a9sultat de la conversion de l'entier naturel `n` en base `initial_base` \u00c3\u00a0 la base `final_base`. Cette fonction prend en arguments trois strings et ne retourne rien.\n\n- `get_inputs ()` est une fonction permettant de recueillir les entr\u00c3\u00a9es de l'utilisateur (\u00c3\u00a9tant le nombre entier \u00c3\u00a0 convertir, sa base, ainsi que la base dans laquelle on veut convertir l'entier naturel). Par cons\u00c3\u00a9quence, cette fonction ne prend aucun argument, mais renvoie trois strings.\n\n- `wait_for_input (text, error_text, *possible_inputs)` est une fonction permettant d'obtenir une entr\u00c3\u00a9e de l'utilisateur apr\u00c3\u00a8s avoir afficher le string `texte`. Si l'entr\u00c3\u00a9e donn\u00c3\u00a9e n'est pas dans les diff\u00c3\u00a9rents `*possible_inputs`, alors on affiche `error_text` et on redemande \u00c3\u00a0 l'utilisateur d'entrer une information jusqu'\u00c3\u00a0 ce qu'elle soit valid\u00c3\u00a9e.\n\n### Dans AsciiArt.py\n\n- `print_with_font (text)` est une fonction qui premi\u00c3\u00a8rement importe l'\u00c3\u00a9quivalent de chaque lettre \u00c3\u00a0 l'aide de la fonction `get_font`. Elle utilise ces \u00c3\u00a9quivalences pour \u00c3\u00a9crire un texte donn\u00c3\u00a9 en argument avec la police choisie.\n\n- `get_font ()` est une fonction qui retourne un dictionnaire comprenant pour chaque lettre une liste correspondant \u00c3\u00a0 chaque ligne de la police.\n\n### Dans main.py\n\n- `introduce_program ()` \u00c3\u00a9crit les informations d'utilisation du programme ainsi que le titre \u00c3\u00a0 l'aide de la fonction `print_with_font ()` import\u00c3\u00a9e depuis [AsciiArt.py](../AsciiArt.py) .\n\n- `get_str_list_conversions (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et renvoie une liste de textes telle que chaque texte r\u00c3\u00a9sume une conversion, dans l'ordre dans lequel les conversions ont \u00c3\u00a9t\u00c3\u00a9 r\u00c3\u00a9alis\u00c3\u00a9es.\n\n- `display_conversions ()` \u00c3\u00a9crit en sortie toutes les conversions qui ont \u00c3\u00a9t\u00c3\u00a9 faites depuis le lancement du programme, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- `update_txt_file (conversions)` est une fonction prenant une liste de dictionnaires (`conversions`) et \u00c3\u00a9crit \u00c3\u00a0 la suite du fichier `conversions.txt` les conversions, \u00c3\u00a0 l'aide de la fonction `get_str_list_conversions`.\n\n- La derni\u00c3\u00a8re partie n'est ex\u00c3\u00a9cut\u00c3\u00a9e que si le programme est execut\u00c3\u00a9 directement. Elle appelle la fonction `introduce_program ()`, r\u00c3\u00a9alisant les conversions de l'utilisateur et les affichant apr\u00c3\u00a8s que l'utilisateur n'ait plus envie de r\u00c3\u00a9aliser des conversions. \n\n## Utilisation\n\nChaque fichier peut \u00c3\u00aatre utilis\u00c3\u00a9 ind\u00c3\u00a9pendemment des autres, mis \u00c3\u00a0 part [ConvertToBin.py](../ConvertToBin.py)et [ConvertToHex.py](../ConvertToHex.py) qui emploient [ConvertToDec.py](../ConvertToDec.py), en l'important a l'aide du keyword `import`.\n",
            "context": "golfbzougefo",
            "date": "27/03/2024 - 11:05",
            "likes": 0,
            "dislikes": 0,
            "original_lang": "EN",
            "keywords": [
                "guogofugz"
            ],
            "comments": []
        }
    }
}